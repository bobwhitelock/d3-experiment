#!/usr/bin/env ruby

require 'http'
require 'parallel'

TWFY_API_KEY = ENV.fetch('TWFY_API_KEY')
TWFY_GET_MPS_URL = 'https://www.theyworkforyou.com/api/getMPs'
MPS_DATA_DIR = 'data/mps'

def main
  FileUtils.mkdir_p(MPS_DATA_DIR)

  # Want to get MPs as existed on date of every vote.
  vote_dates = JSON.load(File.new('data/policies.json')).flat_map do |policy|
    policy['aspects'].flat_map do |aspect|
      Date.strptime(aspect['motion']['date'])
    end
  end.uniq.map do |date|
    [date.year, date.month, date.day].join('-')
  end.reject do |date|
    # If we've already retrieved data from this date don't need to do so again.
    File.exists?(mps_data_file(date: date))
  end

  Parallel.map(vote_dates, progress: "Retrieving MPs API data", in_threads: 4) do |date|
    data = retrieve_mps_data(date: date)
    data_file = mps_data_file(date: date)
    File.write(data_file, JSON.pretty_generate(data))
    sleep 0.5
  end
end

def retrieve_mps_data(date:)
  response = HTTP.get(TWFY_GET_MPS_URL, params: {
    key: TWFY_API_KEY,
    output: 'js',
    date: date,
  })
  JSON.parse(response.body.to_s)
end

def mps_data_file(date:)
  File.join(MPS_DATA_DIR, "#{date}.json")
end

main
