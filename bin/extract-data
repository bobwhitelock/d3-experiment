#!/usr/bin/env ruby

require 'nokogiri'
require 'ruby-progressbar'
require 'sequel'

DB = Sequel.postgres(username: 'postgres')
MPS_FILE_DATE_REGEX = /data\/mps\/(\d{4})-(\d{1,2})-(\d{1,2})\.json/
PERSON_ID_REGEX = /uk\.org\.publicwhip\/person\/(\d+)/

def main
  load_people
  load_votes
end

def load_people
  files = Dir['data/mps/*.json']
  progress_bar = ProgressBar.create(title: 'Extracting MPs', total: files.length)

  people_data = files.flat_map do |file|
    date_match = file.match(MPS_FILE_DATE_REGEX)
    year, month, day = date_match[1].to_i, date_match[2].to_i, date_match[3].to_i
    date = Date.new(year, month, day)

    JSON.load(File.new(file)).map do |person|
      [person['person_id'], date, person['name'], person['party']]
    end.tap { progress_bar.increment }
  end

  puts 'Importing people...'
  DB[:people].import([:person_id, :date, :name, :party], people_data)
end

def load_votes
  raw_data = JSON.load(File.new('data/policies.json'))
  progress_bar = ProgressBar.create(title: 'Extracting votes', total: raw_data.length)

  vote_events_data = raw_data.flat_map do |p|
    policy_id = DB[:policies].insert({
      title: replace_html_entities(p['title'].strip),
      text: replace_html_entities(p['text'].strip),
    })

    p['aspects'].flat_map do |a|
      motion = a['motion']

      # Only care about parliament votes.
      if motion['organization_id'] == 'uk.parliament.commons'

        existing_vote = DB[:votes].where(motion_id: motion['id']).first

        if existing_vote
          # The same vote can appear multiple times for different policies; if
          # this is not the first time we've seen this vote then we just need
          # to save an association between this vote and the current policy.
          link_vote_and_policy(
            vote_id: existing_vote[:id],
            policy_id: policy_id
          )

          # No new vote events for bulk import below.
          nil
        else
          # This is the first time we've seen this vote; save it and all vote
          # events.

          actions = motion['actions'] || {}
          date = Date.strptime(motion['date'])

          vote_id = DB[:votes].insert({
            motion_id: motion['id'],
            text: replace_html_entities(motion['text']),
            actions_yes: replace_html_entities(actions['yes']),
            actions_no: replace_html_entities(actions['no']),
            date: date,
          })

          link_vote_and_policy(vote_id: vote_id, policy_id: policy_id)

          vote_events = motion['vote_events']
          raise if vote_events.length > 1

          vote_events.first['votes'].map do |vote|
            person_id = extract_person_id(vote['id'])
            [vote['option'], person_id, vote_id]
          end
        end
      end
    end.reject(&:nil?).tap { progress_bar.increment }
  end

  puts 'Importing vote events...'
  DB[:vote_events].import([:option, :person_id, :vote_id], vote_events_data)
end

def replace_html_entities(string)
  Nokogiri::HTML(string).text
end

def extract_person_id(id_string)
  id_string.match(PERSON_ID_REGEX)[1]
end

def link_vote_and_policy(vote_id:, policy_id:)
  DB[:votes_policies].insert({
    vote_id: vote_id,
    policy_id: policy_id,
  })
end

main
